# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

job_defaults: &job_defaults
  working_directory: ~/repo

git_tags: &git_tags
  tags:
    only: /^\d+\.\d+\.\d+$/

run_env_setup: &run_env_setup
  run:
    name: Setup Environment Variables
    command: |
      echo 'export PATH="${PATH}:${HOME}/repo/git-secrets"' >> $BASH_ENV

run_secret_setup: &run_secret_setup
  run:
    name: Install git secrets and configure minnie-kenny.sh
    command: |
      git clone https://github.com/awslabs/git-secrets.git
      pushd git-secrets >/dev/null
      git checkout ad82d68ee924906a0401dfd48de5057731a9bc84
      popd >/dev/null
      ./minnie-kenny.sh -f

jobs:
  secrets:
    <<: *job_defaults
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - <<: *run_env_setup
      - <<: *run_secret_setup
      - run:
          name: Check for git secrets
          command: git secrets --scan-history

  test:
    <<: *job_defaults

    docker:
      - image: circleci/python:3.9.5

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pyproject.toml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.4.0 python3 -
            poetry install

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "pyproject.toml" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            ./pytest.sh

      - run:
          name: run linter
          command: |
            . venv/bin/activate
            ./mypy.sh


      - store_artifacts:
          path: test-reports
          destination: test-reports

  build:
    <<: *job_defaults
    docker:
      - image: google/cloud-sdk

    environment:
      GCR_REGISTRY_HOST: us.gcr.io
      GCR_IMAGE_NAME: us.gcr.io/broad-dsp-gcr-public/import-service

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Build image
          command: |
            docker build -t "${GCR_IMAGE_NAME}:${CIRCLE_TAG:-${CIRCLE_BRANCH}}" -f Dockerfile .
            if [[ ${CIRCLE_BRANCH} == "develop" ]]; then
              docker tag ${GCR_IMAGE_NAME}:${CIRCLE_BRANCH} ${GCR_IMAGE_NAME}:latest
            fi
      - run:
          name: Push to GCR
          command: |
            # SA copied from secret/dsde/dsp-techops/common/dspci-wb-gcr-service-account.json
            # Get the credentials used to push to GCR from CircleCI from the CircleCI environment variables
            echo ${GCR_SA} > ${HOME}/gcr_auth_key_file.json
            gcloud auth activate-service-account --key-file ${HOME}/gcr_auth_key_file.json
            # Register `gcloud` as a Docker credential helper. Add `-q` to silence confirmation prompts
            gcloud auth configure-docker ${GCR_REGISTRY_HOST} -q
            docker push "${GCR_IMAGE_NAME}:${CIRCLE_TAG:-${CIRCLE_BRANCH}}"
            if [[ ${CIRCLE_BRANCH} == "develop" ]]; then
              docker push ${GCR_IMAGE_NAME}:latest
            fi

workflows:
  version: 2
  test-and-build:
    jobs:
      - secrets:
          filters:
            <<: *git_tags
      - test
      - build:
          requires:
            - test
            - secrets
          filters:
            <<: *git_tags
